
Deploy ReactJs app on a ec2 server via pm2 ,

1) First need to clone the project or deply via winscp 

git clone https://github.com/adelicia-js/todo-cra.git

2) cd into the web root directory of the project 

3) First run commend "npm install " it will install all the packages and dependency 

"npm install "

4) Now run "npm run build"

Once the "npm run build" cmd run successfully run this below commnd 

5) npm install -g serve

6) Now start app via pm2 process 

pm2 start npm --name "my-react-app" -- start

7) pm2 startup systemd  >> it will auto run the app whenever server reboot or restart 

https://aws.amazon.com/blogs/aws/rotate-your-ssl-tls-certificates-now-amazon-rds-and-amazon-aurora-expire-in-2024/

-------------------------------------------------------------------------------------------------------------------------------------------

file -s /dev/xvdf
------------------------------------------------------------------------------------------------------------------------------------------
file -s /dev/xvda1

resize2fs /dev/xvda1

growpart /dev/xvda 1



mkfs -t xfs /dev/xvdf

-------------------------------------------------------------------------------------------------------------------------------------------------

lsblk


sudo growpart /dev/nvme0n1 1

sudo resize2fs /dev/nvme0n1p1

----------------------------------------------------------------------------------------------------------------------

CPU Stressing testing 

Step 1. Install a the stress-ng tool to overwhelm the CPU.

Step 2. Connect to the instance with SSH and run sudo apt update and sudo apt install -y stress to update the apt repository on Ubuntu.

check version > stress --version 

Step 4. After stress is installed, you can run sudo stress --cpu 2 --timeout 1h. This will use two of your CPU cores at 100% for one hour.

Step 5. Open another terminal on that instance and use htop, a cross-platform interactive process viewer, to see the current state of the CPU and system memory

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

sudo apt install mysql-server

sudo service mysql status

sudo ss -tap | grep mysql

You can edit the files in /etc/mysql/ to configure the basic settings – log file, port number, etc. For example, to configure MySQL to listen for connections from network hosts, in the file /etc/mysql/mysql.conf.d/mysqld.cnf, change the bind-address directive to the server’s IP address


----------------------------------------------------------------------------------------------------------------------------

Git bitbucket Error Resolution : 

Error : fatal: unable to access 'https://bitbucket.org/hyenoon/carlutions.git/': Could not resolve host: bitbucket.org

Possiible solution run this 2 commends :

1) sudo systemctl restart systemd-resolved
2) sudo systemd-resolve --flush-caches

--------------------------------------------------------------------------------------------------------------------------

Changed PHP version from 7.3 to 8.1 for a specfic app .

1) First need to disable current PHP version 

 a2dismod php7.3
 a2enmod php8.1

systemctl restart apache2.services

After that run this commend 
sudo update-alternatives --set php /usr/bin/php8.1

 a2dismod php8.1
 a2enmod php7.3

systemctl restart apache2.service

 sudo update-alternatives --set php /usr/bin/php7.3
systemctl restart apache2.services 

-------------------------------------------------------------------------------------------------------------

root@ubuntu ~]# a2dismod php5.6

root@ubuntu ~]# a2enmod php7.4

root@ubuntu ~]# systemctl restart apache2

--------------------------------------------------------------------------------------------------------------
#!/bin/bash

# Define variables
BACKUP_DIR="/home/ubuntu/backups"
WEB_DIR="/var/www/project/knls"
DB_NAME="admindb"
DB_USER="admin"
DB_PASSWORD="saknfkdf"
DATE=$(date +%F)

# Ensure the backup directory exists
mkdir -p "$BACKUP_DIR"

# Backup website files
tar -czf "$BACKUP_DIR/website_backup_$DATE.tar.gz" -C "$WEB_DIR" .

# Backup MySQL database
mysqldump -u "$DB_USER" -p"$DB_PASSWORD" "$DB_NAME" > "$BACKUP_DIR/db_backup_$DATE.sql"

# Delete old backups (retain only the latest ones)
find "$BACKUP_DIR" -type f -name "website_backup_*.tar.gz" ! -name "website_backup_$DATE.tar.gz" -exec rm {} +
find "$BACKUP_DIR" -type f -name "db_backup_*.sql" ! -name "db_backup_$DATE.sql" -exec rm {} +

echo "Backup completed for $DATE"


------------------------------------------------------------------------------------------------------------------

mysql -u root -p'admin@1234' databasename < databasefilename.sql 

/etc/mysql/mysql.conf.d > under this file changed bind file from 127.0.0.1 to 0.0.0.0. 

